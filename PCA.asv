function D = PCA(D, files);


% Define output folder
outputFolder = '/Users/yilinwu/Desktop/nic/Vicon/plot/PCA/';

% Iterate over each file
for fileIndex = 1:length(files)    
    % Combine X, Y, Z data into a single matrix
    idx = D{fileIndex}.startTime * 120 + 1:D{fileIndex}.endTime * 120;
    T = idx(1):idx(end);

    data = [];
    for mk = D{fileIndex}.Chosen_mk
        data = [data, D{fileIndex}.x(T,mk), D{fileIndex}.y(T,mk), D{fileIndex}.z(T,mk)];
    end

    % Perform PCA
    [coeff, score, latent, ~, explained] = pca(data);
    % Project data onto the principal component space
    projected_data = data * coeff;

    % Save PCA values in D.{fileIndex}.PCA
    D{fileIndex}.PCA.coeff = coeff;
    D{fileIndex}.PCA.score = score;
    D{fileIndex}.PCA.latent = latent;
    D{fileIndex}.PCA.explained = explained;
    D{fileIndex}.PCA.projected_data=projected_data;

    % Plot the percentage of variance explained by each principal component
    figure;
    pareto(explained);
    xlabel('Principal Component');
    ylabel('Variance Explained (%)');
    title('Variance Explained by Principal Components');
    % Save plot
    saveas(gcf, fullfile(outputFolder, ['Variance_Explained_File_', num2str(fileIndex), '.png']));
    
    % Plot the principal component scores to visualize the data in the reduced dimensional space
    figure;
    scatter(score(:,1), score(:,2), 25, D{fileIndex}.time(T), 'filled');
    xlabel('Principal Component 1');
    ylabel('Principal Component 2');
    title('Principal Component Scores');
    colormap('jet');
    colorbar;
    % Save plot
    saveas(gcf, fullfile(outputFolder, ['Principal_Component_Scores_File_', num2str(fileIndex), '.png']));
    
    % Plot marker data and reduced data
    % separate
    figure;
    for a = 1:width(data)
        subplot(width(data), 2, 2 * a - 1)
        plot(D{fileIndex}.time(T), data(:, a))
        ylabel(['Marker Data (', num2str(a), ')'])
        title('Inputs')
    
        subplot(width(data), 2, 2 * a)
        plot(D{fileIndex}.time(T), projected_data(:, a))
        ylabel(['Reduced Data (', num2str(a), ')'])
        title('Outputs')
    end
    % Save plot
    saveas(gcf, fullfile(outputFolder, ['Marker_Reduced_Data_File_separate', num2str(fileIndex), '.png']));

    % marker
    num_markers = numel(D{fileIndex}.Chosen_mk);
    figure;
    for a = 1:num_markers
        subplot(num_markers, 2, 2 * a - 1)
        plot(D{fileIndex}.time(T), data(:, (a-1)*3+1:a*3))
        ylabel(['Marker Data (', num2str(D{fileIndex}.Chosen_mk(a)), ')'])
        title('Inputs')

        subplot(num_markers, 2, 2 * a)
        plot(D{fileIndex}.time(T), projected_data(:, (a-1)*3+1:a*3))
        ylabel(['Reduced Data (', num2str(D{fileIndex}.Chosen_mk(a)), ')'])
        title('Outputs')
    end
    % Save plot
    saveas(gcf, fullfile(outputFolder, ['Marker_Reduced_Data_File_', num2str(fileIndex), '.png']));


end
