function D = getData(files);
%% clean the data
% Read the CSV file from Vicon load to Matlab
% Properties setting: 
% Filename:Current Tral
% File Extension:.csv
% First Frame:Selected Start
% Last Frame:Selected End
% Delimiter:,
% Export Gait Cycle Parameters:no
% Export Events:no
% Devices:
    % Devices for Export:All
    % Combined Forceplates:All
% Joints
    % Kinematics:none
% Model Outputs
    % Model Outputs:All
    % Modeled Markers:All
% Segments
    % Global Angle:None
% Trajectories
    % Components:All
    % Distance From Origin:None
    % Trajectory Count:Yes


    for fileIndex = 1:length(files)
        D{fileIndex}.filePath = files{fileIndex};
        

        data = readtable(D{fileIndex}.filePath);
                
        % Get the original header names
        D{fileIndex}.headers = data.Properties.VariableNames;
     
        D{fileIndex}.frameRate=120;

        % get total frame index and time
        D{fileIndex}.frame = table2array(data(2:end,1));
        D{fileIndex}.time = D{fileIndex}.frame/D{fileIndex}.frameRate;

        %get markers name, save in makers (cell array) as MarkerName, and x, y ,z
        %for the marker
        D{fileIndex}.MarkersCount=0;

        % Loop through the headers and update names as required
        for column = 3:length(D{fileIndex}.headers)-1
            if ~contains(D{fileIndex}.headers{column}, 'Var')
                D{fileIndex}.MarkersCount=D{fileIndex}.MarkersCount+1;
                D{fileIndex}.markers{D{fileIndex}.MarkersCount}.MarkerName=D{fileIndex}.headers{column};
                D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawX=table2array(data(2:end,column));
                D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawY=table2array(data(2:end,column+1));
                D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawZ=table2array(data(2:end,column+2));
            end
            if contains(D{fileIndex}.headers{column}, 'Var')
            end
        end
    end

    fileIndex=1;
    mk=16;
    if iscell(D{fileIndex}.markers{mk}.rawX)
        for i = 1:numel(D{fileIndex}.markers{mk}.rawX)
            if isempty(D{fileIndex}.markers{mk}.rawX{i})
                D{fileIndex}.markers{mk}.rawX{i} = NaN;
            end
        end
    end


fileIndex = 1;
mk = 16;
if iscell(D{fileIndex}.markers{mk}.rawX)
D{fileIndex}.markers{mk}.rawX=str2double
end




    D{1}.markers{16}.rawX=str2double(D{1}.markers{16}.rawX);




% 
% 
%     for fileIndex = 1:length(files)
%         for mk=1:D{fileIndex}.MarkersCount
%             for f=1:length(D{fileIndex}.frame)
% 
%                 % Check if arrays are empty and replace with NaN
%                 if isempty(D{fileIndex}.markers{mk}.rawX(f))
%                     D{fileIndex}.markers{mk}.rawX(f) = NaN;
%                 end
%                 if isempty(D{fileIndex}.markers{mk}.rawY(f))
%                     D{fileIndex}.markers{mk}.rawY(f) = NaN;
%                 end
%                 if isempty(D{fileIndex}.markers{mk}.rawZ(f))
%                     D{fileIndex}.markers{mk}.rawZ(f) = NaN;
%                 end
%             end
%         end
%     end
% 
% 











% 
% %%
% function D = getData(files)
%     % Preallocate cell array for D
%     D = cell(length(files), 1);
% 
%     for fileIndex = 1:length(files)
%         D{fileIndex}.filePath = files{fileIndex};
% 
%         % Read the CSV file
%         try
%             data = readtable(D{fileIndex}.filePath);
%         catch exception
%             error(['Error reading file: ' exception.message]);
%         end
% 
%         % Display the read data
%         disp(['Data read from file ' num2str(fileIndex) ':']);
%         disp(data);
% 
%         % Set frame rate
%         D{fileIndex}.frameRate = 120;
% 
%         % Extract frame and time information
%         D{fileIndex}.frame = table2array(data(2:end,1));
%         D{fileIndex}.time = D{fileIndex}.frame / D{fileIndex}.frameRate;
% 
%         % Extract headers
%         D{fileIndex}.headers = data.Properties.VariableNames;
% 
%         % Initialize marker count
%         D{fileIndex}.MarkersCount = 0;
% 
%         % Extract marker data
%         for column = 3:length(D{fileIndex}.headers) - 1
%             if ~contains(D{fileIndex}.headers{column}, 'Var')
%                 D{fileIndex}.MarkersCount = D{fileIndex}.MarkersCount + 1;
%                 D{fileIndex}.markers{D{fileIndex}.MarkersCount}.MarkerName = D{fileIndex}.headers{column};
%                 D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawX = table2array(data(2:end, column));
%                 D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawY = table2array(data(2:end, column + 1));
%                 D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawZ = table2array(data(2:end, column + 2));
%                 
%                 % Print marker data
%                 disp(['Marker ' num2str(D{fileIndex}.MarkersCount) ' (' D{fileIndex}.markers{D{fileIndex}.MarkersCount}.MarkerName '):']);
%                 disp(['Raw X: ' num2str(D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawX)]);
%                 disp(['Raw Y: ' num2str(D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawY)]);
%                 disp(['Raw Z: ' num2str(D{fileIndex}.markers{D{fileIndex}.MarkersCount}.rawZ)]);
%             end
%         end
%     end
% end

